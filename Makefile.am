ACLOCAL_AMFLAGS = --install -I m4

SUBDIRS = lib src
DIST_SUBDIRS = lib src utils

if HAVE_NLS
SUBDIRS += po
DIST_SUBDIRS += po
endif # HAVE_NLS

appicondir = $(datadir)/icons/hicolor/256x256/apps
appicon_DATA = extras/logos/naev.png
Graphicsdir = $(datadir)/applications
Graphics_DATA = org.naev.naev.desktop
appdatadir = $(datadir)/metainfo
appdata_DATA = org.naev.naev.metainfo.xml
dist_pkgdata_DATA = naev-confupdate.sh

dist_man6_MANS = naev.6
dist_doc_DATA = CHANGELOG code_of_conduct.md README Readme.md TODO LICENSE

MKSPR      = $(top_builddir)/utils/mkspr/mkspr$(EXEEXT)
NAEV	     = $(top_builddir)/$(PACKAGE)$(EXEEXT)

VERSIONFILE = $(top_builddir)/dat/VERSION
LICENSEFILE = $(top_builddir)/dat/LICENSE
LANGUAGEFILE = $(top_builddir)/dat/LANGUAGES

EXTRA_DIST = build/config.rpath LICENSE extras dat utils org.naev.naev.desktop org.naev.naev.metainfo.xml check-po.sh
CLEANFILES = $(NAEV) $(VERSIONFILE) $(LANGUAGEFILE) $(LICENSEFILE)

if HAVE_MACOS
$(top_builddir)/Info.plist: $(top_srcdir)/extras/macos/Info.plist.in
	./config.status -q --file=$@:$<
INSTALL_SCRIPT_CRAP = $(top_builddir)/Info.plist
else # HAVE_MACOS
INSTALL_SCRIPT_CRAP =
endif # HAVE_MACOS

CLEANFILES += $(INSTALL_SCRIPT_CRAP)

if HAVE_NLS
XMLFILES    = $(top_srcdir)/po/POTFILES_XML.in
TRANSLATIONITS = $(top_srcdir)/po/its/translation.its
CREDITSPOT  = $(top_builddir)/po/credits.pot
CREDITSTEXT = $(top_srcdir)/dat/AUTHORS $(top_srcdir)/dat/intro
NAEVSRCPOT  = $(top_builddir)/po/$(GETTEXT_PACKAGE).pot
NAEVPOT     = $(top_builddir)/po/$(PACKAGE).pot
XMLPOT      = $(top_builddir)/po/xml.pot
EXTRA_DIST += $(XMLFILES) $(TRANSLATIONITS)
EXTRA_DIST += .gdbinit meson.build meson.sh meson_options.txt po/POTFILES_COMBINED.in po/its/translation.loc po/meson.build src/meson.build
EXTRA_DIST += extras/macos/bundle.py utils/package-po.sh
EXTRA_DIST += check-po.sh test/
EXTRA_DIST += docs
EXTRA_DIST += subprojects/packagefiles subprojects/SuiteSparse.wrap subprojects/lua.wrap subprojects/luajit.wrap
CLEANFILES += $(CREDITSPOT) $(NAEVPOT) $(XMLPOT)
TESTS = check-po.sh
AM_TESTS_ENVIRONMENT = POFILE='$(srcdir)/po/de.po'; EXPECT=9000; export POFILE EXPECT;
endif # HAVE_NLS

.PHONY: data pot docs utils help install-ndata soundtrack

all-local: $(NAEV) data

data: pot $(VERSIONFILE) $(LICENSEFILE) $(INSTALL_SCRIPT_CRAP)

$(LICENSEFILE): $(top_srcdir)/LICENSE
	@echo "  CP    $<"
	@mkdir -p $(top_builddir)/dat
	cp $< $@

if HAVE_NLS
$(CREDITSPOT): $(CREDITSTEXT)
	@echo "  AWK   $@"
	awk -f $(top_srcdir)/utils/update-po-credits.awk $(CREDITSTEXT) > $@
if HAVE_ITSTOOL
# On windows it seems like '\r' are leaking into filenames and breaking the
# following command, so we use lots of ugly tr instead ¯\_(ツ)_/¯
# xargs -a $(XMLFILES) $(ITSTOOL) -i $(TRANSLATIONITS) > $@
$(XMLPOT): $(XMLFILES) $(TRANSLATIONITS)
	@echo "ITSTOOL $@"
	cat $(XMLFILES) | sed 's@^@$(top_srcdir)/@' | tr '\n' '\0' | tr -d '\r' | xargs -0 $(ITSTOOL) -i $(TRANSLATIONITS) > $@
else # HAVE_ITSTOOL
$(XMLPOT): $(XMLFILES) $(TRANSLATIONITS)
	@echo "XGETTEXT $@"
	$(XGETTEXT) --from-code=UTF-8 --its=$(TRANSLATIONITS) -f $(XMLFILES) -D $(top_srcdir) -o $@
endif # HAVE_ITSTOOL

if HAVE_DATA
pot: $(NAEVPOT)

$(NAEVPOT): $(LANGUAGEFILE) $(CREDITSPOT) $(XMLPOT)
	$(MAKE) -C po
	$(MAKE) -C po naev_src.pot
	$(XGETTEXT) --from-code=UTF-8 -o $(NAEVPOT) $(NAEVSRCPOT) $(XMLPOT) $(CREDITSPOT)
	$(top_srcdir)/utils/gettext.sh $(top_builddir) $<

$(LANGUAGEFILE): $(top_srcdir)/po/LINGUAS
	@mkdir -p $(top_builddir)/dat
	tail -n +2 $< > $@
else # HAVE_DATA
pot:
endif # HAVE_DATA

else # HAVE_NLS
pot:
	@echo "***"
	@echo "*** You must have NLS enabled to compile translation files"
	@echo "***"
endif # HAVE_NLS

$(NAEV):
	@echo "  LN    $(NAEV)"
	$(LN_S) "src/$(NAEV)" "$(NAEV)"

$(VERSIONFILE): src/config.h
	@mkdir -p $(top_builddir)/dat
	@echo $(VERSION) > $@

utils: $(MKSPR)

$(MKSPR):
	$(MAKE) -C utils/mkspr

install-data-local:
	(cd $(top_srcdir)/dat \
	 && find . -type d -exec install -d     "{}" "$(DESTDIR)$(pkgdatadir)/dat/{}" \; \
	 && find . -type f -exec install -m 644 "{}" "$(DESTDIR)$(pkgdatadir)/dat/{}" \; )

clean-local:
	(rm -rf $(top_builddir)/dat/gettext)

uninstall-hook:
	echo " rm -rf '$(DESTDIR)$(pkgdatadir)'"; \
	echo " rm -rf '$(docdir)'"; \
	rm -rf "$(DESTDIR)$(pkgdatadir)"
	rm -rf "$(docdir)"

docs:
	$(MAKE) -C docs

soundtrack: naev-$(VERSION)-soundtrack.zip

naev-$(VERSION)-soundtrack.zip: $(top_srcdir)/utils/soundtrack.py dat/snd/soundtrack.yaml $(VERSIONFILE)
	$(top_srcdir)/utils/soundtrack.py --source-dir=$(top_srcdir)

help:
	@echo "Possible targets are:"
	@echo "        all - builds everything"
	@echo "       docs - creates the doxygen documentation"
	@echo " soundtrack - creates the soundtrack zip file"
	@echo "      clean - removes binaries and object files"
	@echo "    install - installs naev"
	@echo "  uninstall - removes previously installed files"
	@echo "  dist-gzip - creates a source tarball with gzip compression"
	@echo " dist-bzip2 - creates a source tarball with bzip2 compression"
	@echo "  distcheck - checks if the created tarball works properly"
	@echo "  distclean - does clean and removes files created by configure"
